{"version":3,"file":"App.js","sources":["../src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst faceEmojis = [\r\n    '😂', '😊', '😍', '🤣', '😭', '🥰', \r\n    '😘', '😎', '😏', '🤔', '😒', '😢',\r\n    '🤯', '🥺', '😳'\r\n];\r\n\r\nconst nonFaceEmojis = [\r\n    '🔥', '✨', '💀', '🫶', '👀', '🙌',\r\n    '🖤', '💯', '🤡', '🍿', '💔', '🫡',\r\n    '🤞', '👑', '⚡'\r\n];\r\n\r\nconst RandomEmoji = ({ \r\n    face = true,\r\n    nonFace = true,\r\n    emojis = [],\r\n    interval = 1000,\r\n    fontSize = '48px',\r\n    className = ''\r\n}) => {\r\n    // Memoize the emoji list based on props\r\n    const finalEmojis = React.useMemo(() => {\r\n        if (emojis.length > 0) return emojis;\r\n        return [\r\n            ...(face ? faceEmojis : []),\r\n            ...(nonFace ? nonFaceEmojis : [])\r\n        ];\r\n    }, [face, nonFace, emojis]); // Rebuild when these change\r\n\r\n    const [currentEmoji, setCurrentEmoji] = useState(finalEmojis[0] || '❓');\r\n\r\n    useEffect(() => {\r\n        // Skip if no emojis available\r\n        if (finalEmojis.length === 0) return;\r\n\r\n        const intervalId = setInterval(() => {\r\n            const randomIndex = Math.floor(Math.random() * finalEmojis.length);\r\n            setCurrentEmoji(finalEmojis[randomIndex]);\r\n        }, interval);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [finalEmojis, interval]); // Re-set interval when emojis change\r\n\r\n    return (\r\n        <span \r\n            className={`random-emoji ${className}`}\r\n            style={{ fontSize }}\r\n            role=\"img\"\r\n            aria-label=\"Random emoji\"\r\n        >\r\n            {finalEmojis.length > 0 ? currentEmoji : 'No emojis selected'}\r\n        </span>\r\n    );\r\n};\r\n\r\nRandomEmoji.propTypes = {\r\n    face: PropTypes.bool,\r\n    nonFace: PropTypes.bool,\r\n    emojis: PropTypes.arrayOf(PropTypes.string),\r\n    interval: PropTypes.number,\r\n    fontSize: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default RandomEmoji;"],"names":["faceEmojis","nonFaceEmojis","RandomEmoji","_ref","_ref$face","face","_ref$nonFace","nonFace","_ref$emojis","emojis","_ref$interval","interval","_ref$fontSize","fontSize","_ref$className","className","finalEmojis","React","useMemo","length","concat","_useState","useState","currentEmoji","setCurrentEmoji","useEffect","intervalId","setInterval","randomIndex","Math","floor","random","clearInterval","createElement","style","role","propTypes","PropTypes","bool","arrayOf","string","number","oneOfType"],"mappings":"mKAGMA,EAAa,CACf,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,MAGVC,EAAgB,CAClB,KAAM,IAAK,KAAM,KAAM,KAAM,KAC7B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAGVC,EAAc,SAAHC,GAOX,IAAAC,EAAAD,EANFE,KAAAA,OAAI,IAAAD,GAAOA,EAAAE,EAAAH,EACXI,QAAAA,WAAOD,GAAOA,EAAAE,EAAAL,EACdM,OAAAA,OAAS,IAAHD,EAAG,GAAEA,EAAAE,EAAAP,EACXQ,SAAAA,OAAQ,IAAAD,EAAG,IAAIA,EAAAE,EAAAT,EACfU,SAAAA,OAAW,IAAHD,EAAG,OAAMA,EAAAE,EAAAX,EACjBY,UAAAA,OAAS,IAAAD,EAAG,GAAEA,EAGRE,EAAcC,EAAAA,QAAMC,QAAQ,WAC9B,OAAIT,EAAOU,OAAS,EAAUV,EAC9BW,GAAAA,OACQf,EAAOL,EAAa,GACpBO,EAAUN,EAAgB,GAEtC,EAAG,CAACI,EAAME,EAASE,IAEnBY,EAAwCC,EAAQA,SAACN,EAAY,IAAM,KAA5DO,EAAYF,EAAA,GAAEG,EAAeH,KAcpC,OAZAI,YAAU,WAEN,GAA2B,IAAvBT,EAAYG,OAAhB,CAEA,IAAMO,EAAaC,YAAY,WAC3B,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWf,EAAYG,QAC3DK,EAAgBR,EAAYY,GAChC,EAAGjB,GAEH,OAAa,WAAA,OAAAqB,cAAcN,EAAW,CALtC,CAMJ,EAAG,CAACV,EAAaL,iBAGbM,EAAA,QAAAgB,cACIlB,OAAAA,CAAAA,0BAA2BA,EAC3BmB,MAAO,CAAErB,SAAAA,GACTsB,KAAK,MACL,aAAW,gBAEVnB,EAAYG,OAAS,EAAII,EAAe,qBAGrD,EAEArB,EAAYkC,UAAY,CACpB/B,KAAMgC,EAAAA,QAAUC,KAChB/B,QAAS8B,EAAAA,QAAUC,KACnB7B,OAAQ4B,EAAS,QAACE,QAAQF,EAAAA,QAAUG,QACpC7B,SAAU0B,EAAAA,QAAUI,OACpB5B,SAAUwB,EAAAA,QAAUK,UAAU,CAC1BL,EAAAA,QAAUG,OACVH,EAAS,QAACI,SAEd1B,UAAWsB,EAAAA,QAAUG"}