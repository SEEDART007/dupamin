{"version":3,"file":"App.modern.mjs","sources":["../src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst faceEmojis = [\r\n    '😂', '😊', '😍', '🤣', '😭', '🥰', \r\n    '😘', '😎', '😏', '🤔', '😒', '😢',\r\n    '🤯', '🥺', '😳'\r\n];\r\n\r\nconst nonFaceEmojis = [\r\n    '🔥', '✨', '💀', '🫶', '👀', '🙌',\r\n    '🖤', '💯', '🤡', '🍿', '💔', '🫡',\r\n    '🤞', '👑', '⚡'\r\n];\r\n\r\nconst RandomEmoji = ({ \r\n    face = true,\r\n    nonFace = true,\r\n    emojis = [],\r\n    interval = 1000,\r\n    fontSize = '48px',\r\n    className = ''\r\n}) => {\r\n    // Memoize the emoji list based on props\r\n    const finalEmojis = React.useMemo(() => {\r\n        if (emojis.length > 0) return emojis;\r\n        return [\r\n            ...(face ? faceEmojis : []),\r\n            ...(nonFace ? nonFaceEmojis : [])\r\n        ];\r\n    }, [face, nonFace, emojis]); // Rebuild when these change\r\n\r\n    const [currentEmoji, setCurrentEmoji] = useState(finalEmojis[0] || '❓');\r\n\r\n    useEffect(() => {\r\n        // Skip if no emojis available\r\n        if (finalEmojis.length === 0) return;\r\n\r\n        const intervalId = setInterval(() => {\r\n            const randomIndex = Math.floor(Math.random() * finalEmojis.length);\r\n            setCurrentEmoji(finalEmojis[randomIndex]);\r\n        }, interval);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [finalEmojis, interval]); // Re-set interval when emojis change\r\n\r\n    return (\r\n        <span \r\n            className={`random-emoji ${className}`}\r\n            style={{ fontSize }}\r\n            role=\"img\"\r\n            aria-label=\"Random emoji\"\r\n        >\r\n            {finalEmojis.length > 0 ? currentEmoji : 'No emojis selected'}\r\n        </span>\r\n    );\r\n};\r\n\r\nRandomEmoji.propTypes = {\r\n    face: PropTypes.bool,\r\n    nonFace: PropTypes.bool,\r\n    emojis: PropTypes.arrayOf(PropTypes.string),\r\n    interval: PropTypes.number,\r\n    fontSize: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default RandomEmoji;"],"names":["faceEmojis","nonFaceEmojis","RandomEmoji","face","nonFace","emojis","interval","fontSize","className","finalEmojis","React","useMemo","length","currentEmoji","setCurrentEmoji","useState","useEffect","intervalId","setInterval","randomIndex","Math","floor","random","clearInterval","createElement","style","role","propTypes","PropTypes","bool","arrayOf","string","number","oneOfType"],"mappings":"6EAGA,MAAMA,EAAa,CACf,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,MAGVC,EAAgB,CAClB,KAAM,IAAK,KAAM,KAAM,KAAM,KAC7B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAGVC,EAAcA,EAChBC,KAAAA,GAAO,EACPC,QAAAA,GAAU,EACVC,OAAAA,EAAS,GACTC,SAAAA,EAAW,IACXC,SAAAA,EAAW,OACXC,UAAAA,EAAY,OAGZ,MAAMC,EAAcC,EAAMC,QAAQ,IAC1BN,EAAOO,OAAS,EAAUP,EACvB,IACCF,EAAOH,EAAa,MACpBI,EAAUH,EAAgB,IAEnC,CAACE,EAAMC,EAASC,KAEZQ,EAAcC,GAAmBC,EAASN,EAAY,IAAM,KAcnE,OAZAO,EAAU,KAEN,GAA2B,IAAvBP,EAAYG,OAAc,OAE9B,MAAMK,EAAaC,YAAY,KAC3B,MAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWb,EAAYG,QAC3DE,EAAgBL,EAAYU,GAAY,EACzCb,GAEH,MAAO,IAAMiB,cAAcN,EAAU,EACtC,CAACR,EAAaH,iBAGbI,EAAAc,cAAA,OAAA,CACIhB,UAAW,gBAAgBA,IAC3BiB,MAAO,CAAElB,SAAAA,GACTmB,KAAK,MACL,aAAW,gBAEVjB,EAAYG,OAAS,EAAIC,EAAe,qBACvC,EAIdX,EAAYyB,UAAY,CACpBxB,KAAMyB,EAAUC,KAChBzB,QAASwB,EAAUC,KACnBxB,OAAQuB,EAAUE,QAAQF,EAAUG,QACpCzB,SAAUsB,EAAUI,OACpBzB,SAAUqB,EAAUK,UAAU,CAC1BL,EAAUG,OACVH,EAAUI,SAEdxB,UAAWoB,EAAUG"}